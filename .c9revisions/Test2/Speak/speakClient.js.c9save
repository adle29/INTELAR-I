{"ts":1344186519995,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//(function(window, undefined) {\n  var speakWorker;\n  var talk = 0;\n  var boolean = false;\n  \n  try {\n    speakWorker = new Worker('Speak/speakWorker.js');\n  } catch(e) {\n    console.log('speak.js warning: no worker support');\n  }\n  \n  window.pause = function() {\n    document.getElementById(\"player\").pause();\n  }\n  \n  window.resume = function() {\n    document.getElementById(\"player\").play();\n  }\n\n  window.speak = function(text, args, onended) {\n    function parseWav(wav) {\n      function readInt(i, bytes) {\n        var ret = 0;\n        var shft = 0;\n        while (bytes) {\n          ret += wav[i] << shft;\n          shft += 8;\n          i++;\n          bytes--;\n        }\n        return ret;\n      }\n      if (readInt(20, 2) != 1) throw 'Invalid compression code, not PCM';\n      if (readInt(22, 2) != 1) throw 'Invalid number of channels, not 1';\n      return {\n        sampleRate: readInt(24, 4),\n        bitsPerSample: readInt(34, 2),\n        samples: wav.subarray(44)\n      };\n    }\n\n    function playHTMLAudioElement(wav) {\n      function encode64(data) {\n        var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        var PAD = '=';\n        var ret = '';\n        var leftchar = 0;\n        var leftbits = 0;\n        for (var i = 0; i < data.length; i++) {\n          leftchar = (leftchar << 8) | data[i];\n          leftbits += 8;\n          while (leftbits >= 6) {\n            var curr = (leftchar >> (leftbits-6)) & 0x3f;\n            leftbits -= 6;\n            ret += BASE[curr];\n          }\n        }\n        if (leftbits == 2) {\n          ret += BASE[(leftchar&3) << 4];\n          ret += PAD + PAD;\n        } else if (leftbits == 4) {\n          ret += BASE[(leftchar&0xf) << 2];\n          ret += PAD;\n        }\n        return ret;\n      }\n\n      document.getElementById(\"audio\").innerHTML=(\"<audio id=\\\"player\\\" src=\\\"data:audio/x-wav;base64,\"+encode64(wav)+\"\\\">\");\n      if (onended) {\n        document.getElementById(\"player\").addEventListener('ended', onended);\n        boolean = false;\n      }\n\n      document.getElementById(\"player\").play();\n      //EVENTS\n      document.getElementById(\"player\").addEventListener('playing', function (e){\n\t\t        boolean = true;\n\t     });\n\n\t    document.getElementById(\"player\").addEventListener('ended', function (e){\n\t\t     boolean = false;\n       \n\t    }); \n\t     \n    }\n\n    function playAudioDataAPI(data) {\n      try {\n        var output = new Audio();\n        output.mozSetup(1, data.sampleRate);\n        var num = data.samples.length;\n        var buffer = data.samples;\n        var f32Buffer = new Float32Array(num);\n        for (var i = 0; i < num; i++) {\n          var value = buffer[i<<1] + (buffer[(i<<1)+1]<<8);\n          if (value >= 0x8000) value |= ~0x7FFF;\n          f32Buffer[i] = value / 0x8000;\n        }\n        output.mozWriteAudio(f32Buffer);\n        return true;\n      } catch(e) {\n        return false;\n      }\n    }\n\n    function handleWav(wav) {\n      var data = parseWav(wav); // validate the data and parse it\n\n      // TODO: try playAudioDataAPI(data), and fallback if failed\n      playHTMLAudioElement(wav);\n    }\n\n    if (args && args.noWorker) {\n      // Do everything right now. speakGenerator.js must have been loaded.\n      handleWav(generateSpeech(text, args));\n    } else {\n      // Call the worker, which will return a wav that we then play\n      speakWorker.onmessage = function(event) {\n        handleWav(event.data);\n      };\n      speakWorker.postMessage({ text: text, args: args });\n    }\n  }\n\n//})(window);\n    \n\n   "]],"start1":0,"start2":0,"length1":0,"length2":3546}]],"length":3546}
